require 'rex/proto/dcerpc'

module Msf

###
#
# This mixin provides utility methods for interacting with a DCERPC service on
# a remote machine.  These methods may generally be useful in the context of
# exploitation.  This mixin extends the Tcp exploit mixin. Only one DCERPC 
# service can be accessed at a time using this class.
#
###
module Exploit::Remote::DCERPC
	include Exploit::Remote::Tcp

	# Alias over the Rex DCERPC protocol modules
	DCERPCPacket   = Rex::Proto::DCERPC::Packet
	DCERPCClient   = Rex::Proto::DCERPC::Client
	DCERPCResponse = Rex::Proto::DCERPC::Response
	DCERPCUUID     = Rex::Proto::DCERPC::UUID
    NDR            = Rex::Proto::DCERPC::NDR

	def initialize(info = {})
		super
	
		register_advanced_options(
			[
				OptInt.new('DCERPCFragSize',   [ true, 'Set the DCERPC packet fragmentation size', 127]),
				OptBool.new('DCERPCFakeMultiBind', [ false, 'Use multi-context bind calls', 'True' ])
			], Msf::Exploit::Remote::DCERPC)

		register_options(
			[
				Opt::RHOST,
				Opt::RPORT(135),
			], Msf::Exploit::Remote::DCERPC
        )
	end

    def dcerpc_handle (uuid, version, protocol, options)
        self.handle = Rex::Proto::DCERPC::Handle.new([uuid, version], protocol, datastore['RHOST'], options)
    end

    def dcerpc_bind (h)
        if datastore['DCERPCFragSize']
            options['frag_size'] = datastore['DCERPCFragSize']
        end

        if datastore['DCERPCFakeMultiBind']
            options['fake_multi_bind'] = 1
        end

        self.dcerpc = Rex::Proto::DCERPC::Client.new(h, dcerpc_socket(), options)
        if self.handle.protocol == 'ncacn_np'
            self.simple = self.dcerpc.smb  # expose the simple client if we have access to it
        end
    end

    def dcerpc_call (function, stub = '')
        dcerpc.call(function, stub)
    end

	# Convert a standard ASCII string to 16-bit Unicode
	def unicode (str)
		Rex::Text.to_unicode(str)
	end
	
	# Used to track the last DCERPC context 
    attr_accessor	:dcerpc_bind_context, :handle, :dcerpc, :dcerpc_socket
	
end

end
