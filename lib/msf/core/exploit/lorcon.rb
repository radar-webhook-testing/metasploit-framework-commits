module Msf

###
#
# This module provides methods for sending raw 802.11 frames
# using the Ruby Lorcon module, a wrapper for the lorcon library.
#
###

module Exploit::Lorcon

	#
	# Initializes an instance of an exploit module that accesses a 802.11 network
	#
	
	def initialize(info = {})
		super

		register_options(
			[
				OptString.new('INTERFACE', [true, 'The name of the wireless interface', 'ath0']),
				OptString.new('DRIVER', [true, 'The name of the wireless driver for lorcon', 'madwifi']),
				OptInt.new('CHANNEL', [true, 'The default channel number', 11])
			], Msf::Exploit::Lorcon
		)

		
		begin
			require 'Lorcon'
			@lorcon_loaded = true
		rescue ::Exception => e
			@lorcon_loaded = false
			@lorcon_error  = e
		end
	
	end

	#
	# Opens a handle to the specified wireless device
	#
	def open_wifi
	
		if (not @lorcon_loaded)
			print_status("The Lorcon module is not available: #{@lorcon_error.to_s}")
			raise RuntimeError, "Lorcon not available"
		end
		
		self.wifi = ::Lorcon::Device.new(datastore['INTERFACE'], datastore['DRIVER'], datastore['CHANNEL'])
		
		if (not self.wifi)
			raise RuntimeError, "Could not open the wireless device interface"
		end
	end


	attr_accessor :wifi

end

end
